import pandas as pd
from itertools import islice

from sklearn.model_selection import train_test_split
from accCheck_FileIO import *
from datetime import datetime
import numpy as np

#設定パラメータ：
dstFolder="./failedImg"
train_portion=80
# 不合格になったモードの画像を収集する
def get_AccFailedModeImg(df:pd.DataFrame,failedModes:list):
    
    
    for i in range(len(failedModes)):
        #failedModeImg_df=pd.concat([failedModeImg_df,df[df["判定"]==failedModes[i]]["フルパス"]])
        failedModeImg_Series=df[df["判定"]==failedModes[i]]["フルパス"]
        for oriImgPath in failedModeImg_Series.to_numpy(): # if dtype is datetime, int, float, str, string
            copy_WithRetry(oriImgPath,dstFolder)
            # debug用　
            # print(oriImgPath)
    




# 精度監視期間内の画像データを収集
def get_ImgInAccCheckPeriod(df:pd.DataFrame,startDate:datetime,endDate:datetime):
    # Get index of the start date data
    startIndex=0
    for i in range(len(df['フルパス'])):
        ImgPath=df['フルパス'][i]
        element=ImgPath.split("\\")
        ImgDate=datetime.strptime(element[len(element)-5],"%Y%m%d")

        if ImgDate>=startDate:
            startIndex=i
            break


    # Get index of the end date data
    endIndex=0
    for i in range(len(df['フルパス'])-1,-1,-1):
        ImgPath=df['フルパス'][i]
        element=ImgPath.split("\\")
        ImgDate=datetime.strptime(element[len(element)-5],'%Y%m%d')

        if ImgDate<=endDate:
            endIndex=i
            break
    # 制度監視期間内のデータのみを返す
    return df.iloc[startIndex:endIndex+1]
    

# 精度監視に使った画像を収集して出力
def output_UsedImg(ImgPaths):
    ImgPaths_np=np.asarray(ImgPaths)
    for oriImgPath in ImgPaths_np:
        copy_WithRetry(oriImgPath,dstFolder)
        

# 精度監視に使った画像を学習データとテストデータに分ける
def split_Train_Test(pathList,train_portion):
    X_train,X_test=train_test_split(pathList,train_size=train_portion*0.01,random_state=0,shuffle=False)
    return X_train,X_test
# oriImgPath="howard.csv"
# dstFolder="./failedImg"
# copy_WithRetry(oriImgPath,dstFolder)


df = pd.read_csv("./AccJudgementRecord.csv",encoding='shift-jis')
#print(len(df))
# 精度監視期間内の画像データを収集
startDate_str='20230425'
endDate_str='20230426'
startDate = datetime.strptime(startDate_str, '%Y%m%d')
endDate = datetime.strptime(endDate_str, '%Y%m%d')
df=get_ImgInAccCheckPeriod(df,startDate,endDate)
#print(len(df))

# 精度監視に使った画像を収集して出力(分けあり)
# 精度監視に使った画像を学習データとテストデータに分ける
trainImgs,testImgs=split_Train_Test(df['フルパス'],train_portion)
output_UsedImg(trainImgs)
output_UsedImg(testImgs)
#or
# 精度監視に使った画像を収集して出力(分けなし)
output_UsedImg(df['フルパス'])



# 不合格になったモードの画像を収集する
failedModes=["ガビガビ","変色変形"]
get_AccFailedModeImg(df,failedModes)
---------------------------------------------------------
accCheck_FileIO.py

import shutil
import os
import time

# Retryの回数制限
retryLimit=3
# Retry と　Retryとの間隔
retryInterval=1



# Copy a file with auto retry if an error occurs
def copy_WithRetry(oriFilePath,dstFolder):
    
    for i in range(retryLimit):
        try:
            if not os.path.exists(dstFolder):
                os.makedirs(dstFolder)
            shutil.copy(oriFilePath, dstFolder)
            break
        except:
            if i < retryLimit-1:
                time.sleep(retryInterval) # Sleep for retryInterval seconds

-------------------------
Diffusion in pytorch GitHub 參考程式碼：
https://github.com/dome272/Diffusion-Models-pytorch

https://github.com/lucidrains/denoising-diffusion-pytorch


https://github.com/pesser/pytorch_diffusion

            


        







